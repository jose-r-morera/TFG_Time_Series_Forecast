    past_data_layer = tf.keras.layers.Input(shape=past_data_shape, name="past_data")
    x1 = tf.keras.layers.Conv1D(42, 3, activation='relu', padding='causal')(past_data_layer)
    #x1 = tf.keras.layers.Conv1D(8, 2, activation='relu', padding='causal')(x1)
    
    #x1 = tf.keras.layers.AveragePooling1D(pool_size=3)(x1)
    x1 = tf.keras.layers.Flatten()(x1)

    # Future data: Flatten + Dense compression
    future_data_layer = tf.keras.layers.Input(shape=future_data_shape, name="future_data")
    x2 = tf.keras.layers.Flatten()(future_data_layer)
    x2 = tf.keras.layers.Dense(4, activation='relu')(x2)

    # Combine and predict
    y = tf.keras.layers.concatenate([x1, x2])
    outputs = tf.keras.layers.Dense(output_units, name='outputs')(y)

    model = tf.keras.Model(inputs=[past_data_layer, future_data_layer], outputs=outputs)
    model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=learning_rate), loss="mse")
    ############################################################################################
    
Average val_loss over 6 runs: 0.117377 ± 0.000474
Minimum val_loss over 6 runs: 0.116742

# Kernel = 2
Average val_loss over 6 runs: 0.116721 ± 0.000601
Minimum val_loss over 6 runs: 0.116125

# Filtros = 49  (PEOR)
Average val_loss over 6 runs: 0.116805 ± 0.000779
Minimum val_loss over 6 runs: 0.115872

# Filtros = 35  (PEOR)
Average val_loss over 6 runs: 0.117216 ± 0.000681
Minimum val_loss over 6 runs: 0.116370

## (SE MANTIENE EL MODELO DE ARRIBA PERO CON KERNEL=2)
    past_data_layer = tf.keras.layers.Input(shape=past_data_shape, name="past_data")
    x1 = tf.keras.layers.Conv1D(42, 2, activation='relu', padding='causal')(past_data_layer)
    #x1 = tf.keras.layers.Conv1D(8, 2, activation='relu', padding='causal')(x1)
    
    #x1 = tf.keras.layers.AveragePooling1D(pool_size=3)(x1)
    x1 = tf.keras.layers.Flatten()(x1)

    # Future data: Flatten + Dense compression
    future_data_layer = tf.keras.layers.Input(shape=future_data_shape, name="future_data")
    x2 = tf.keras.layers.Flatten()(future_data_layer)
    x2 = tf.keras.layers.Dense(4, activation='relu')(x2)

    # Combine and predict
    y = tf.keras.layers.concatenate([x1, x2])
    outputs = tf.keras.layers.Dense(output_units, name='outputs')(y)

    model = tf.keras.Model(inputs=[past_data_layer, future_data_layer], outputs=outputs)
    model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=learning_rate), loss="mse")